service: node-sls
frameworkVersion: '2 || 3'

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: '20201221'
  region: us-east-1
  #stage: test
  profile: serverless-admin
  tracing:
    lambda: true

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-offline-sqs
custom:
  serverless-offline:
    #httpsProtocol: "dev-certs"
    httpPort: 3000
    stageVariables:
      foo: "bar"
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
    # Uncomment only if you already have a DynamoDB running locally
    noStart: true


# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.py'
#    - '!exclude-me-dir/**'
#    - include-me.py
#    - include-me-dir/**

package:
  individually: true
  exclude:
    - './**'

layers:
  nodeFunLayer:
    path: ./nodeFun/layer # required, path to layer contents on disk
    name: ${sls:stage}-nodeFun # optional, Deployed Lambda layer name
    description: Description of what the lambda layer does # optional, Description to publish to AWS
    package:
      patterns:
        - 'nodejs/**'
    compatibleRuntimes: # optional, a list of runtimes this layer is compatible with
      - nodejs14.x
    compatibleArchitectures: # optional, a list of architectures this layer is compatible with
      - x86_64
    licenseInfo: GPLv3 

functions:
  nodeFun:
    # environment: 
    #   functionEnvVar: 
    #     'Fn::GetAtt': [usersTable, Arn]
    timeout: 10
    memorySize: 128
    package:
      include:
        - nodeFun/dist/**
      # patterns:
      #   - '!layer/**'
      #   - '!node_modules/**'
      #   - '!src/**'
      #   - '!test/**'
      #   - '!*.json'
      #   - 'dist/**'

    layers:
      - Ref: NodeFunLayerLambdaLayer
    handler: nodeFun/dist/index.handler
    role: 
      'Fn::GetAtt': [TestLambdaRole, Arn] 
    events:
      - httpApi:
          path: /
          method: get

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details 
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

resources:
  Resources:
    TestLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: test-lambda-role
        AssumeRolePolicyDocument:
          Statement:
            - Action:
              - sts:AssumeRole
              Effect: Allow
              Principal:
                Service:
                - lambda.amazonaws.com
          Version: '2012-10-17'
        Policies:
          - PolicyName: TestLambdaPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Sid: LambdaGetAccountSettings
                  Effect: Allow
                  Action:
                    - lambda:GetAccountSettings
                  Resource: '*'
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        Path: /sls/lambda/role/

# resources:
#   Resources:
#     usersTable:
#       Type: AWS::DynamoDB::Table
#       Properties:
#         TableName: usersTable
#         AttributeDefinitions:
#           - AttributeName: email
#             AttributeType: S
#         KeySchema:
#           - AttributeName: email
#             KeyType: HASH
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1

# aws dynamodb put-item --table-name usersTable --item '{"email":{"S":"a@bc"}}' --region us-east-1 --profile serverless-admin --endpoint-url http://localhost:8000
# aws dynamodb get-item --table-name usersTable --key '{"email":{"S":"a@bc"}}' --region us-east-1 --profile serverless-admin --endpoint-url http://localhost:8000
# aws dynamodb list-tables --endpoint-url http://localhost:8000 --region us-east-1 --profile serverless-admin

